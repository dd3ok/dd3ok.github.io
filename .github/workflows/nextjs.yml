name: Deploy Next.js to GitHub Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: npm ci

      - name: Build with Next.js
        env:
          NEXT_PUBLIC_DATA_ETF_API: ${{ secrets.DATA_ETF_API }}
          NEXT_PUBLIC_DATA_ETF_API_KEY: ${{ secrets.DATA_ETF_API_KEY }}
          NEXT_PUBLIC_PAGES_KOYEB_API: ${{ secrets.PAGES_KOYEB_API }}
          NEXT_PUBLIC_PAGES_KOYEB_API_KEY: ${{ secrets.PAGES_KOYEB_API_KEY }}
          NEXT_PUBLIC_WHO_AM_AI_API: ${{ secrets.WHO_AM_AI_API }}
        run: npm run build

      - name: Create and prepare out directory
        run: |
          echo "Creating out directory for GitHub Pages..."
          mkdir -p out
          
          # Copy public folder contents to out
          if [ -d "public" ]; then
            cp -r public/* out/ 2>/dev/null || true
            echo "Copied public folder contents"
          fi
          
          # Copy Next.js build output
          if [ -d ".next/static" ]; then
            mkdir -p out/_next
            cp -r .next/static out/_next/ 2>/dev/null || true
            echo "Copied static files"
          fi
          
          # Find and copy HTML files from .next/server/app
          if [ -d ".next/server/app" ]; then
            find .next/server/app -name "*.html" -type f | while read file; do
              relative_path=${file#.next/server/app/}
              mkdir -p "out/$(dirname "$relative_path")"
              cp "$file" "out/$relative_path" 2>/dev/null || true
            done
            echo "Copied HTML files from server/app"
          fi
          
          # Ensure we have an index.html
          if [ ! -f "out/index.html" ]; then
            if [ -f ".next/server/app/index.html" ]; then
              cp ".next/server/app/index.html" "out/index.html"
            elif [ -f ".next/server/app/page.html" ]; then
              cp ".next/server/app/page.html" "out/index.html"
            else
              echo "<!DOCTYPE html><html><head><title>Portfolio</title></head><body><h1>Loading...</h1></body></html>" > out/index.html
            fi
          fi
          
          echo "Final out directory contents:"
          ls -la out/

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
